---
project:
  type: default   # convierte la carpeta en proyecto Quarto

metadata-files:
  - ../multi.yml 
title: ""
subtitle: "*Taller de Metodología de Investigación I*"
author: "Dr. Jorge E. Bracamontes G."
format:
  revealjs:
    transition: zoom
    transition-speed: slow
    theme: night
    hash: true
    center: true
    css: [fondo.css]
    incremental: true
    title-slide-attributes:
      data-background-image: "images/fn.png"
      data-background-size: "cover"
      data-background-opacity: "1.0"
---





<script>
// URL de tu servidor multiplex en Render.com
const serverUrl = 'https://multiplex-t9sz.onrender.com';

// Función para enviar una solicitud al servidor
function keepAlive() {
  fetch(serverUrl)
    .then(response => {
      console.log('Ping enviado al servidor. Estado:', response.status);
    })
    .catch(error => {
      console.error('Error al enviar el ping:', error);
    });
}

// Envía un "ping" cada 10 minutos (600000 milisegundos)
setInterval(keepAlive, 600000);
</script>

<script>
    document.addEventListener('DOMContentLoaded', (event) => {
        const synth = window.speechSynthesis;
        let utterance;
        let paused = false;

        const fullscreenButton = document.createElement('button');
        fullscreenButton.id = 'fullscreenButton';
        fullscreenButton.textContent = 'Pantalla Completa';
        fullscreenButton.style.cssText = `
            position: fixed;
            bottom: 20px;
            left: 20px;
            z-index: 1000;
            padding: 12px 20px;
            background-color: #ff7300;
            color: #ffffcc;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        `;
        document.body.appendChild(fullscreenButton);

        const readIncrementalContent = (element) => {
            if (utterance && synth.speaking) synth.cancel();
            let textToRead = element.textContent;
            if (textToRead.trim() !== '') {
                utterance = new SpeechSynthesisUtterance(textToRead);
                const voices = synth.getVoices();
                const voice = voices.find(v => v.lang.startsWith('es-'));
                if (voice) utterance.voice = voice;
                synth.speak(utterance);
            }
        };

        const readCurrentSlide = () => {
            if (utterance && synth.speaking) synth.cancel();
            const currentSlide = document.querySelector('.present');
            const visibleElements = currentSlide.querySelectorAll('h1,h2,h3,h4,h5,h6,p,li:not([aria-hidden="true"]):not(.fragment)');
            let textToRead = '';
            visibleElements.forEach((el) => {
                if (getComputedStyle(el).display !== 'none') textToRead += el.textContent + ' ';
            });
            if (textToRead.trim() !== '') {
                utterance = new SpeechSynthesisUtterance(textToRead);
                const voices = synth.getVoices();
                const voice = voices.find(v => v.lang.startsWith('es-'));
                if (voice) utterance.voice = voice;
                synth.speak(utterance);
            }
        };

        document.addEventListener('keydown', (event) => {
            if (event.key.toLowerCase() === 'q') {
                if (paused) {
                    synth.resume();
                    paused = false;
                } else {
                    synth.pause();
                    paused = true;
                }
            }
        });

        Reveal.on('slidechanged', () => readCurrentSlide());
        Reveal.on('fragmentshown', (event) => readIncrementalContent(event.fragment));

        const playButton = document.createElement('button');
        playButton.textContent = 'Reproducir';
        playButton.style.cssText = `
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1000;
            padding: 10px 20px;
            font-size: 16px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        `;
        document.body.appendChild(playButton);

        playButton.addEventListener('click', () => {
            if (synth.speaking) {
                synth.cancel();
                playButton.textContent = 'Reproducir';
            } else {
                readCurrentSlide();
                playButton.textContent = 'Detener';
            }
        });

        Reveal.initialize();
    });
</script>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const fullscreenButton = document.getElementById('fullscreenButton');
    function toggleFullscreen() {
        if (!document.fullscreenElement) {
            document.documentElement.requestFullscreen?.();
        } else {
            document.exitFullscreen?.();
        }
    }
    function handleFullscreenChange() {
        fullscreenButton.style.display = document.fullscreenElement ? 'none' : 'block';
    }
    if (fullscreenButton) {
        fullscreenButton.addEventListener('click', toggleFullscreen);
        document.addEventListener('fullscreenchange', handleFullscreenChange);
    }
});
</script>
